#include <iostream>
using namespace std;

struct Proceso {
    int id;
    string nombre;
    int prioridad;
    Proceso* siguiente;
};

class ListaProcesos {
private:
    Proceso* cabeza;

public:
    ListaProcesos() : cabeza(nullptr) {}

    void insertar(int id, string nombre, int prioridad) {
        Proceso* nuevo = new Proceso{id, nombre, prioridad, cabeza};
        cabeza = nuevo;
    }

    void mostrar() {
        Proceso* temp = cabeza;
        while (temp) {
            cout << "ID: " << temp->id << ", Nombre: " << temp->nombre << ", Prioridad: " << temp->prioridad << endl;
            temp = temp->siguiente;
        }
    }

    Proceso* buscar(int id) {
        Proceso* temp = cabeza;
        while (temp) {
            if (temp->id == id) return temp;
            temp = temp->siguiente;
        }
        return nullptr;
    }

    void eliminar(int id) {
        Proceso* temp = cabeza;
        Proceso* anterior = nullptr;

        while (temp && temp->id != id) {
            anterior = temp;
            temp = temp->siguiente;
        }

        if (!temp) {
            cout << "Proceso no encontrado.\n";
            return;
        }

        if (!anterior) cabeza = temp->siguiente;
        else anterior->siguiente = temp->siguiente;

        delete temp;
        cout << "Proceso eliminado.\n";
    }

    void modificarPrioridad(int id, int nuevaPrioridad) {
        Proceso* temp = buscar(id);
        if (temp) {
            temp->prioridad = nuevaPrioridad;
            cout << "Prioridad modificada.\n";
        } else {
            cout << "Proceso no encontrado.\n";
        }
    }
};


struct NodoCola {
    Proceso* proceso;
    NodoCola* siguiente;
};

class ColaPrioridad {
private:
    NodoCola* frente;

public:
    ColaPrioridad() : frente(nullptr) {}

    void encolar(Proceso* p) {
        NodoCola* nuevo = new NodoCola{p, nullptr};

        if (!frente || p->prioridad > frente->proceso->prioridad) {
            nuevo->siguiente = frente;
            frente = nuevo;
        } else {
            NodoCola* temp = frente;
            while (temp->siguiente && temp->siguiente->proceso->prioridad >= p->prioridad) {
                temp = temp->siguiente;
            }
            nuevo->siguiente = temp->siguiente;
            temp->siguiente = nuevo;
        }
    }

    void desencolar() {
        if (!frente) {
            cout << "Cola vacÃ­a.\n";
            return;
        }
        cout << "Ejecutando proceso ID: " << frente->proceso->id << endl;
        NodoCola* temp = frente;
        frente = frente->siguiente;
        delete temp;
    }

    void mostrarCola() {
        NodoCola* temp = frente;
        while (temp) {
            cout << "Proceso ID: " << temp->proceso->id << ", Prioridad: " << temp->proceso->prioridad << endl;
            temp = temp->siguiente;
        }
    }
};
